#!/bin/bash
set -eo pipefail

echo "========================================="
echo "Trader App Deployment Script"
echo "========================================="

# Dependency checks
check_command() {
    if ! command -v $1 &> /dev/null; then
        echo "‚ùå ERROR: $1 could not be found"
        echo "Please install $1 and try again"
        exit 1
    fi
}

echo "üîç Checking dependencies..."
check_command docker
check_command docker-compose

# Interactive setup
echo "========================================="
echo "VPS Configuration"
echo "========================================="
read -p "Enter VPS IP [217.154.57.29]: " VPS_IP
VPS_IP=${VPS_IP:-217.154.57.29}

read -p "Enter domain name (leave blank for IP): " DOMAIN

# API Key setup
echo "========================================="
echo "API Keys Configuration"
echo "========================================="
echo "These keys will be securely stored in a .env file"

# Create .env file
ENV_FILE=".env"
touch $ENV_FILE

setup_env_var() {
    read -sp "Enter $1: " secret
    echo
    if [ -z "$secret" ]; then
        echo "‚ùå ERROR: $1 cannot be empty"
        exit 1
    fi
    echo "$2=$secret" >> $ENV_FILE
    echo "‚úÖ $1 configured successfully"
}

# Remove existing .env file if it exists
if [ -f "$ENV_FILE" ]; then
    rm $ENV_FILE
fi

# Add environment variables
echo "# Generated by deploy.sh - $(date)" > $ENV_FILE
echo "COMPOSE_PROJECT_NAME=trader" >> $ENV_FILE
echo "VPS_IP=$VPS_IP" >> $ENV_FILE
[ -n "$DOMAIN" ] && echo "DOMAIN=$DOMAIN" >> $ENV_FILE

# Add API keys
setup_env_var "OpenRouter API Key" "OPENROUTER_API_KEY"
setup_env_var "TraderMade API Key" "TRADERMADE_API_KEY"

# Load environment variables
set -a
source $ENV_FILE
set +a

echo "‚úÖ Environment configuration complete"

echo "========================================="
echo "üöÄ Starting deployment..."
echo "========================================="

# Build and deploy
echo "üî® Building Docker images..."
docker-compose build --no-cache || {
    echo "‚ùå Build failed. Please check the error messages above."
    exit 1
}

echo "üöÄ Starting services..."
docker-compose up -d --force-recreate || {
    echo "‚ùå Service startup failed. Please check the error messages above."
    exit 1
}

# Health check
echo "üîç Performing health check..."
sleep 5
API_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:80/health || echo "failed")
CLIENT_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 || echo "failed")

if [ "$API_HEALTH" = "200" ]; then
    echo "‚úÖ API is running"
else
    echo "‚ö†Ô∏è API health check returned: $API_HEALTH"
    echo "Check logs with: docker-compose logs api"
fi

if [ "$CLIENT_HEALTH" = "200" ]; then
    echo "‚úÖ Client is running"
else
    echo "‚ö†Ô∏è Client health check returned: $CLIENT_HEALTH"
    echo "Check logs with: docker-compose logs client"
fi

echo "========================================="
echo "‚úÖ Deployment complete!"
echo "========================================="
echo "Access your application at: ${DOMAIN:-http://$VPS_IP}"
echo ""
echo "Useful commands:"
echo "- View logs: docker-compose logs"
echo "- Stop services: docker-compose down"
echo "- Restart services: docker-compose restart"
echo "========================================="
